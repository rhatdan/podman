# -*- sh -*-
#
# test pod-related endpoints
#

# FIXME! Shouldn't /create give an actual pod ID?
expected_id='machine.slice'
if rootless; then
    expected_id=/libpod_parent
fi

t GET  libpod/pods/json            200 null
t POST libpod/pods/create name=foo 201 .id=$expected_id
t GET  libpod/pods/foo/exists      204
t GET  libpod/pods/notfoo/exists   404
t GET  libpod/pods/foo/json        200     .Config.name=foo     .Containers=null
t GET  libpod/pods/json            200 .[0].Config.name=foo .[0].Containers=null

# Cannot create a dup pod with the same name
t POST libpod/pods/create name=foo 409 .cause="pod already exists"

#t POST libpod/pods/create a=b 400 .cause='bad parameter'  # FIXME: unimplemented

if root; then
    t POST libpod/pods/foo/pause   '' 204
else
    t POST libpod/pods/foo/pause '' 500 \
      .cause="this container does not have a cgroup" \
      .message~".*pause pods containing rootless containers with cgroup V1"
fi
t POST libpod/pods/foo/unpause '' 200
t POST libpod/pods/foo/unpause '' 200   # (2nd time)
t POST libpod/pods/foo/stop    '' 304
t POST libpod/pods/foo/restart '' 500 .cause="no such container"

t POST libpod/pods/bar/restart '' 404

#t POST libpod/pods/prune ''    200     # FIXME: unimplemented, returns 500
#t POST libpod/pods/prune 'a=b' 400     # FIXME: unimplemented, returns 500

# Clean up; and try twice, making sure that the second time fails
t DELETE libpod/pods/foo 204
t DELETE libpod/pods/foo 404

# vim: filetype=sh
